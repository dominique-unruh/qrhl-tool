%%% -*- buffer-read-only: t -*-
%%% MAC=1d079c5b1fcec025d0aa436a9ff11e8a3b9d2f8f
%%% LEN=20411
%%% CONTENT_SHA1=d07180dc6fd7435a0b7d6f2b6b644390685a3b07
%%% 
%%% 
%%% 
%%% *** WARNING ***
%%% This is not the master copy of this file.
%%% You can edit this copy, nothing bad will happen.
%%% But it will prevent Dominique Unruh from automatically
%%% transferring changes from the master copy to this copy.
%%% Be prepared to answer to Dominique!
%%% 
%%% (If you are Dominique Unruh, disregard the above warning.)
%%% 
%%% 
%%% 
%%% 
%%% Source: /home/unruh/svn/home/eclipse/latex-tools/uchanges.sty
%%% SVN: 66682+modified
%%% 
%%% 
%%% 
%%% Copyright Dominique Unruh

\makeatletter

%%% The following is the documentation of uchanges.sty and latexhacks.pl
%%% It is automatically skipped if uchages.sty is loaded as a package.
\ifx\@currname\@empty

\documentclass{article}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{color,relsize}
\definecolor{gray}{rgb}{0.5,0.5,0.5}

\begin{document}

\title{\texttt{uchanges.sty}\ \ and\ \ \texttt{latexchanges.pl}}
\author{Dominique Unruh}
\date{}

\maketitle

\tableofcontents

\section{Quick start}

You are reading this because you got a strange error message saying
that \texttt{whoami.txt} does not exist. You do not wish to know
what's going on; you only wish to compile the document without errors
as quickly as possible.

\bigskip

\noindent In this case, follow the following steps:
\begin{itemize}
\item Find out your user key: There should be lines similar to
\begin{verbatim}
\ChangesSetUserColor[Speedy Gonzales]{X}{red}
\end{verbatim}
  in the main file of the document you are compiling.  Look for the
  line containing your name in the comment.  The first argument of
  \verb|\ChangesSetUserColor| is your user key (a single letter; in this
  example: \texttt X). 
  (There might also be a table of user keys and 
  colors on the first page of the document.)
\item Create a file \texttt{whoami.txt} containing a single line 
\begin{verbatim}
\iam X
\end{verbatim}
  where \texttt{X} should be your user key.
\item Do \emph{not} add \texttt{whoami.txt} to the SVN!
\end{itemize}

If in doubt, ask whoever added the \verb|\usepackage[...]{uchanges}|
call to the document (probably Dominique Unruh).


\section{What is uchanges.sty?}

\texttt{uchanges.sty} is a package that provides several macros
allowing to highlight changes while editing a LaTeX document. It is
targeted for the situation where several authors work on the same
document accessed through a version control system. It provides the
following features:
\begin{itemize}
\item Each user marks his changes while editing. For example, if the
  user \texttt X wishes the word ``test'' in a document, he writes
  \verb|\NEWX{test}|.
\item The changes of different users are highlighted in different
  colors. This makes it easy to see which user did what change.
\item Different users can have different views of the document. More
  precisely, a user does not see the highlighting of his own changes,
  and a users \texttt{X} can mark other users' changes as
  ``acknowledge'', in which case these changes are not highlighted any
  more. (But all other users will still see the highlighting.)

  Having different views on the document allows for a more
  asynchronous editing process.  If you change some parts of the
  document (possibly editing a part written by another author), you do
  not need to notify the other authors about each of the changes
  separately. Instead, your changes will be highlighted until the
  other author finds time to look at them and to acknowledge
  them. (Or, in case there is a disagreement, to contact you and to
  discuss the changes.)
\item A command for adding todos to the document is also provides; it
  uses the same color scheme as the change highlighting.
\item There is an option that hides all highlighting and all to-dos in
  the document. This is useful when there are still unacknowledged
  changes, but a clean version of the document needs to be sent out
  (e.g., submitted to a conference).
\item A simple Perl script (\texttt{latexchanges.pl}) is provided that
  automatically removes the highlighting that has been acknowledged by
  all users. However, this script is not needed for compiling the
  LaTeX source nor for adding or acknowledging changes. It is
  sufficient if one of the authors runs the script regularly. Thus the
  packages can also be used if not all authors can run Perl scripts.
\item Note: The package does not automatically detect changes (using,
  e.g., diff). Changes need to be manually marked at the time of
  writing.
\end{itemize}

\section{How to use uchanges.sty?}

Here, I list standard use-cases and how to solve them.

\subsection{I wish to add/remove/replace some text fragment}

If you wish to add some text fragment \texttt{new text} and you are
user \texttt{X}, just write \verb|\NEWX{new text}|. If you wish to
delete some text fragment \texttt{old text}, just replace \texttt{old
  text} by \verb|\REMOVEX{old text}|. If you wish to replace
\texttt{old text} by \texttt{new text}, replace \texttt{old text} by
\verb|\REPLACEX{old text}{new text}|.

Example: You find the following text in the document:
\begin{verbatim}
An orange cup stands on the table.
\end{verbatim}
You might change this into
\begin{verbatim}
A\REMOVEX{n} \REPLACEX{orange}{blue} cup
stands on the \NEWX{four-legged} table.
\end{verbatim}
Your coauthors will see:
``A\textsmaller{\color{red}[[\color{gray}n\color{red}]]}
\textsmaller{\color{red}[[\color{gray}orange\color{red}]]}
\textcolor{red}{blue} cup stands on the \textcolor{red}{four-legged}
table.'' (The actual color may depend on the configuration.)


\subsection{I wish to leave some note for my coauthors in the text}

There are two commands to do this. If you are user \texttt{X}, you can
write use the commands \verb|\TODOX{text}| or
\verb|\MESSAGEX{text}|. The two commands have different semantics and
different behaviour. 

\verb|\TODOX{text}| is used to add some comment that requires some
action (a to-do). The to-do will remain in the document (visible to
all users) until someone manually removes the to-do. It is intended
that one only removes a to-do if whatever it is to be done has been done.

\verb|\MESSAGEX{text}| is an informative message for the other
users. Such a message does not require any action on the part of the
other users. It is usually used to add clarifying remarks next to
changes one has performed in the document. \verb|\MESSAGEX| is treated
like the change highlighting \verb|\NEWX \REMOVEX \REPLACEX|: Each
user can decide to acknowledge a message; that message will then be
hidden from that user (but still visible to the other users).

\bigskip

Example: We have the following text.
\begin{verbatim}
We call an adversary ubersexual if he performs more than $q$ queries.
\end{verbatim}
Author \texttt{X} finds the term ``ubersexual'' offensive. He changes it:
\begin{verbatim}
We call an adversary \REPLACEX{ubersexual}{normal}
if he performs more than $q$ queries.\MESSAGEX{Ubersexual is misleading.}
\TODOX{Replace all other occurrences of ubersexual.}
\end{verbatim}
Later author \texttt{Y} replaces all other occurrences of
``ubersexual''. He can either just remove the to-do, or notify the others
that the to-do is done.
\begin{verbatim}
We call an adversary \REPLACEX{ubersexual}{normal}
if he performs more than $q$ queries.\MESSAGEX{Ubersexual is misleading.}
\REMOVEY{\TODOX{Replace all other occurrences of ubersexual.}}
\end{verbatim}

\subsection{I wish to acknowledge some change/message\\
  (and not see the highlighting any more)}

In order to be able to do this, it is necessary that the script
\texttt{latexchanges.pl} has been invoked at least once since the
change was performed/the message was added. If this is not the case,
either run it, or complain to the author that introduced the
\texttt{uchanges} package and thus is responsible (usually: Dominique
Unruh).

Assuming that \texttt{latexchanges.pl} has been invoked, you will
notice that the macros \verb|\NEWX|, \verb|\REMOVEX|,
\verb|\REPLACEX|, and \verb|\MESSAGEX| have been replaced by
\verb|\NEWXfor{YZ}|, \verb|\REMOVEXfor{YZ}|, \verb|\REPLACEXfor{YZ}|,
and \verb|\MESSAGEXfor{YZ}|. Assume you are user \texttt{Y}. Then you
simply remove the letter \texttt Y from the first argument of these
macros.

\bigskip

\noindent Example (you are user \texttt Y):
\begin{verbatim}
Our contribution is new \NEWXfor{YZ}{100830}{and exiting}.
\end{verbatim}
When rendering the document, you see ``Our contribution is new
\textcolor{red}{and exiting}.'' (The actual color may depend on the
configuration.) You like the change, so you modify the source:
\begin{verbatim}
Our contribution is new \NEWXfor{Z}{100830}{and exiting}.
\end{verbatim}
Rendering gives: ``Our contribution is new \textcolor{red}{and
  exiting}.''  User \texttt Z still sees the red text. So he also
removes his user key:
\begin{verbatim}
Our contribution is new \NEWXfor{}{100830}{and exiting}.
\end{verbatim}
Now the highlighting is gone for everyone.  The next time
\texttt{latexchanges.pl} is run, the source is automatically cleaned
up:
\begin{verbatim}
Our contribution is new and exiting.
\end{verbatim}

\bigskip
\noindent
\textbf{Hint:} To replace a lot of changes, it is often useful to do
search and replace, e.g., \verb|for{YZ}| $\to$ \verb|for{Z}| and
\verb|for{Y}| $\to$ \verb|for{}| . But be careful not to accidentally
replace the wrong things or to remove someone else's highlighting.

Alternatively, you (being user \texttt X) can run
\texttt{latexchanges.pl --removeuser X} to remove all highlighting
from your view.


\subsection{I wish to temporarily hide all highlighting from the document}

This might be the case if you wish to submit the paper or send a
preliminary version of it to someone, but you did not find time to go
through all changes yet.

In this case, just add the option \texttt{hide} to the package
\texttt{uchanges}. That is, in the main document you change
\begin{verbatim}
\usepackage[users=XYZ]{uchanges}
\end{verbatim}
into
\begin{verbatim}
\usepackage[users=XYZ,hide]{uchanges}
\end{verbatim}

Do not forget to remove the \texttt{hide} flag afterwards. Otherwise
your coauthors will not see their highlighting any more.

(There is also a useful automatism: If a flag \texttt{\char`\\ ifdraft} is
defined in your preamble, then by default the \texttt{hide}-flag is
automatically added if \texttt{\char`\\ ifdraft} is disabled (by
\verb|\draftfalse|). Use \verb|hide=true| or \verb|hide=false| to
override this behaviour.)


\end{document}
\fi





\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{uchanges}
\RequirePackage{kvoptions} % ftp://ftp.fu-berlin.de/tex/CTAN/macros/latex/contrib/oberdiek/kvoptions.dtx

%\newif\if@show@changes\@show@changestrue


\SetupKeyvalOptions{family=latexchanges,prefix=ch@opt@}

% Undefined ifXXX counts as false
\newcommand\ch@callif[1]{\expandafter\ifx\csname if#1\endcsname\iftrue\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}
% Undefined ifXXX counts as true
\newcommand\ch@callifb[1]{\expandafter\ifx\csname if#1\endcsname\iffalse\expandafter\@secondoftwo\else\expandafter\@firstoftwo\fi}


\ch@callifb{draft}{\DeclareBoolOption[true]{show}}{\DeclareBoolOption[false]{show}}

\DeclareBoolOption[true]{color}
\DeclareComplementaryOption{bw}{color}
\DeclareComplementaryOption{hide}{show}
\DeclareStringOption{users}
\DeclareBoolOption[false]{hidetodos}
\DeclareBoolOption[false]{legacytodo}

\ProcessKeyvalOptions{latexchanges}

\ifx\ch@opt@users\empty
  \PackageError{changes}{Option users not given}{Please specify users=XXX as a package option where XXX is a list of all user keys.}
\fi

\RequirePackage{color}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\RequirePackage{relsize}

\def\ch@color@info{}

% Configures the changes of user #1 to appear in colour #2.
% The colour #2 should be a colour known to color.sty.
% Can also be used in whoami.txt.
\newcommand\ChangesSetUserColor[3][]{\global\expandafter\def\csname ch@col@#2\endcsname{#3}%
  \g@addto@macro\ch@color@info{\ch@color@info@line{#1}{#2}{#3}}%
}

\newcommand\ChangesShowColorInfo{\ifch@opt@show
  \begin{center}
    \def\ch@color@info@line##1##2##3{\textcolor{##3}{##2} & \textcolor{##3}{##1} \\}%
    \begin{tabular}{|l|l|}
      \hline
      \multicolumn{2}{|l|}{uchanges keys and colors} \\
      \hline
      \ch@color@info
      \hline
    \end{tabular}
  \end{center}
  \fi
}

\newcommand\ChangesSetBW{\global\ch@opt@colorfalse}
\newcommand\ChangesSetColor{\global\ch@opt@colortrue}
\newcommand\ChangesSetHide{\global\ch@opt@showfalse}
\newcommand\ChangesHideTodos{\global\ch@opt@hidetodostrue}

% \newchangecommand@ <\command> \@nil [<nrargs>] {show} {hide} {userkey}
% Define \command, \commandfor for user userkey
% The userkey must already be contained in command
% See \newchangecommand for the meaning of the other args
\def\newchangecommand@#1[#2]#3#4#5{%
  {\escapechar=-1\xdef\ch@macroname{\string#1}}%
  \edef\ch@hidename{\ch@macroname @hide}% This does not seem to be used?
  \ifch@opt@show
  \expandafter\newcommand\csname\ch@macroname @show\endcsname[#2]{#3}%
  \else
  \expandafter\newcommand\csname\ch@macroname @show\endcsname[#2]{#4}%
  \fi
  \expandafter\newcommand\csname\ch@macroname @hide\endcsname[#2]{#4}%
  \expandafter\ch@preview@skip\csname\ch@macroname\endcsname
  \expandafter\ch@preview@skip\csname\ch@macroname for\endcsname
  \edef\temp@a{%
    \def\expandafter\noexpand\csname\ch@macroname\endcsname{\expandafter\noexpand\expandafter\csname\ch@macroname @show\endcsname{#5}}%
    % \commandfor{#1}{#2}{...} - #1 users to show, #2 ignored (for latexchanges.pl)
    \def\expandafter\noexpand\csname\ch@macroname for\endcsname####1####2{%
      \noexpand\ch@for
      \expandafter\noexpand\csname\ch@macroname @show\endcsname
      \expandafter\noexpand\csname\ch@macroname @hide\endcsname
      ####1\noexpand\@nil{#5}%
      }
  }
  \temp@a
}

% \newchangecommand <\command> [<nrargs>] {show} {hide}
% Define \commandX, \commandXfor for all users X
% \commandX takes <nrargs> arguments
% If \commandX should be shown for X, show is executed
% Otherwise hide is executed
% The <nrargs> is not optional!
\def\newchangecommand#1[#2]#3#4{%
  {\escapechar=-1 \expandafter}%
  \expandafter\expandafter\expandafter\newchangecommand@II
  \expandafter\ch@opt@users\expandafter\@nil\expandafter{\string#1}[#2]{#3}{#4}%
}
% \newchangecommand@II <userkey>+ \@nil {command} [<nrargs>] {show} {hide}
% Like \newchangecommand
% <userkey>+ must contain the keys of all existing users
% command must be the name of the command as string (w/o leading \)
\def\newchangecommand@II#1#2\@nil#3[#4]#5#6{%
  \expandafter\newchangecommand@\csname#3#1\endcsname[#4]{#5}{#6}{#1}%
  \ifx\@nil#2\@nil\else\newchangecommand@II#2\@nil{#3}[#4]{#5}{#6}\fi
}

\newcommand\ch@gencmd[1]{%
  \edef\temp@a{%
    \def\csname #1for\endcsname####1{%
      \noexpand\ch@for\csname #1@show\endcsname
                      \csname #1@hide\endcsname
                      ####1\@nil}
  }
  \typeout{TA: \meaning\temp@a}
  \temp@a
}


% \ch@preview@skip <\macro>
% Adds \macro to the list of macros that should be ignored by preview
% if preview is loaded.
\newcommand\ch@preview@skip[1]{%
  \g@addto@macro\ch@preview@skiplist{\PreviewMacro*#1}%
}
\def\ch@preview@skiplist{}
\AtBeginDocument{\ifx\PreviewMacro\undefined\else
  \ch@preview@skiplist
  \ch@callif{Preview}{\let\ch@sidecross\empty}{}%
  \fi}

\ch@preview@skip\TODO

% \ChangesIfUser{users}{true}{false}
% If the current user is in <users>, execute <true>, else <false>
\newcommand\ChangesIfUser[3]{%
  \ch@for{#2}{#3}#1\@nil
}

% \ch@for <\hitcmd> <\misscmd> <userkey>* \@nil {macro} <macroargs>
% Wenn einer der Userkeys matcht, fuehre \hitcmd aus, sonst \misscmd
\def\ch@for #1#2#3\@nil{%
  \ifx\ch@for#3\ch@for
  \expandafter\ch@for@dosecond
  \else
  \expandafter\ch@for@
  \fi
  {#1}{#2}#3\@nil}

% \ch@for@ <\hitcmd> <\misscmd> <userkey>+ \@nil {macro} <macroargs>
% Wie \ch@for, nur muss mindestens ein UserK uebergeben werden
\def\ch@for@ #1#2#3#4\@nil{%
  \expandafter\ifx\csname ch@whoami@#3\endcsname\relax
  \expandafter\ch@for
  \else
  \expandafter\ch@for@dofirst
  \fi
  {#1}{#2}#4\@nil%
}

\def\ch@message{\typeout{TODO: Check changes.}}

\def\ch@for@dofirst#1#2#3\@nil{\ch@message#1}
\def\ch@for@dosecond#1#2#3\@nil{#2}

\def\ch@defaultcolor{red}
\ifch@opt@color
\def\ch@color#1{%
  \@ifundefined{ch@col@for\ch@whoami}{%
    \@ifundefined{ch@col@#1}{%
      \color{\ch@defaultcolor}%
    }{\color{\csname ch@col@#1\endcsname}}%
  }{\color{\csname ch@col@for\ch@whoami\endcsname}}%
}
\else
\def\ch@color#1{\color{black}\ifmmode\bullet\else\bfseries\fi}
\fi


\def\ch@removeduplicatespace@{%
  \ifx\ch@removeduplicatespace@token\@sptoken\unskip\fi
}
\long\def\@gobblethree#1#2#3{}

% Removes duplicate space.
%
% Example <space> \ch@removeduplicatespace <space> generates a
% single space.
%
% Intended use: <space> \hide{test} <space> should not generate a
% double space if \hide{test} expands to empty text. Therefore, \hide
% should call \ch@removeduplicatespace in this case.
%
% Detailed operation:
% * If we are in vmode, the macros does nothing
% * Otherwise, if the next token is a space, execute \unskip
\def\ch@removeduplicatespace{%
  \ifvmode\expandafter\@gobblethree\fi
  \futurelet\ch@removeduplicatespace@token\ch@removeduplicatespace@
}

% Define the postscript macro xdviinitmatrix to behave like initmatrix
% In the case of xdvi, it applies an additional transformation,
% because xdvi swaps the axes
\special{!
  TeXDict begin
  systemdict /DEVICE known { DEVICE (x11) eq } { false } ifelse
  % true if using xdvi, false otherwise
  { /xdviinitmatrix { initmatrix [0 1 1 0 0 0] concat } bind def }
  { /xdviinitmatrix { initmatrix } bind def }
  ifelse
  end
}

\newcommand\ch@sidecrosspos{40}
\newcommand\ch@sidecrosssize{15}
\newcommand\ch@sidecross{%
 {\special{ps:
     gsave 
     /Helvetica-Bold \ch@sidecrosssize\space selectfont
     xdviinitmatrix
     currentpoint % x y
     exch % y x
     pop % y
     \ch@sidecrosspos\space % y sidecrossposs
     exch % sidecrossposs y
     \ch@sidecrosssize\space 4 div % sidecrossposs y (sidecrosssize/4)
     sub % sidecrossposs y
     moveto (X) show
     grestore
 }}}

\newcommand\ch@text{\ifmmode\expandafter\text\fi}




\def\ch@whoami@error#1{
  \AtBeginDocument{
    \def\ch@allowed@keys{Allowed keys are: \ch@opt@users\space (\ch@color@info). }
    \def\ch@color@info@line##1##2##3{##2=##1 }
    \PackageError{changes}{#1}{}
  }}

\ifch@opt@show
{
  \let\ch@whoamiok\undefined
  \def\iam#1{\let\ch@whoamiok1\global\expandafter\let\csname ch@whoami@#1\endcsname1\gdef\ch@whoami{#1}}
  \InputIfFileExists{whoami.txt}{}{%
    \ch@whoami@error{whoami.txt does not exist. See uchanges.pdf, Section 1 for more info. (Generate using "pdflatex uchanges.sty".) \ch@allowed@keys}
  }
  \ifx\ch@whoamiok\undefined
    \ch@whoami@error{whoami.txt does not contain a line "\string\iam\space X" where X is your user-key.  \ch@allowed@keys See uchanges.dvi, Section 1 for more info. (Generate using "latex uchanges.sty".)}
  \fi
  \expandafter\ch@for\expandafter\@gobble\expandafter\@firstofone\ch@opt@users\ch@opt@users\@nil{\ch@whoami@error{whoami.txt contains nonexisting user-key \ch@whoami.  \ch@allowed@keys See uchanges.dvi, Section 1 for more info. (Generate using "latex uchanges.sty".)}}
}
\fi









% Die User-Macros sind hier zu definieren

\newchangecommand\NEW[2]{{\ch@color{#1}\ch@sidecross#2}}{#2}
\newchangecommand\REPLACE[3]{\textsmaller{{\ch@color{#1}\ch@sidecross[[}\color{gray}#2{\ch@color{#1}]]}}{\ch@color{#1}#3}}{#3}
\newchangecommand\REMOVE[2]{\textsmaller{{\ch@color{#1}\ch@sidecross[[}\color{gray}#2{\ch@color{#1}]]}}}{\ch@removeduplicatespace}
\newchangecommand\MESSAGE[2]{{\ch@text{\ch@color{#1}\ch@sidecross\bfseries [MSG: #2]}}}{\ch@removeduplicatespace}
\newchangecommand\TODO[2]{{%
  \ifch@opt@hidetodos\else
  \ch@color{#1}\ch@sidecross
  \def\temp@a{#2}%
  \ch@text{\bfseries[TODO\ifx\@nil#2\@nil\else: #2\fi]}%
  \typeout{XTODO\ifx\@nil#2\@nil...\else: \ch@strip@meaning@\temp@a\fi}% Outputs containing ()'s confuse AucTeX
  \fi
  }}{\ch@removeduplicatespace}

\expandafter\def\expandafter\ch@strip@meaning\meaning\empty #1\@nil{#1}
\def\ch@strip@meaning@#1{\expandafter\ch@strip@meaning\meaning#1\@nil}

\ifch@opt@legacytodo
\long\def\ch@TODO#1{\ifch@opt@show{%
  \ifch@opt@hidetodos\else
    \color{black}\ch@sidecross
    \def\temp@a{#1}%
    {\bfseries[{\tiny (Anonymous TODO deprecated.)} TODO\ifx\@nil#1\@nil\else: #1\fi]}%
    \typeout{TODO\ifx\@nil#1\@nil...\else: \ch@strip@meaning@\temp@a\fi}% Outputs containing ()'s confuse AucTeX
    \typeout{TODO}%
  \fi
  }%
  \fi}
\def\ch@TODO@#1{\ifmmode\textrm{\ch@TODO{#1}}\else\ch@TODO{#1}\fi}
\def\ch@TODO@@[#1]{\ch@TODO@{#1}}
\DeclareRobustCommand\TODO{\@ifnextchar[{\ch@TODO@@}{\@ifnextchar \bgroup{\ch@TODO@}{\ch@TODO@{}}}}
\fi

%%% Local Variables:
%%% mode: latex
%%% coding: latin-1
%%% End:
%%% Local IspellDict: british
