isabelle.

classical var x : bit.
classical var y : bit.
classical var z : bit*bit.

program s1 := {
  (x,y) <$ uniform UNIV;
}.

program s2 := {
  z <$ uniform UNIV;
}.

qrhl {top} call s1; ~ call s2; {Cla[z2=(x1,y1)]}.
  inline s1.
  inline s2.
  rnd.
  simp.
  skip.
  simp.
qed.

qrhl {top} (x,y) <$ uniform UNIV; ~ x <$ uniform UNIV; {Cla[x1=x2]}.
  rnd z,x <- map_distr (%(x,y). ((x,y),x)) (uniform UNIV).
  simp case_prod_beta.
  admit.
qed.



program p1 := {
  (x,y) <- (1,2);
}.

program p2 := {
  x <- 1;
  y <- 2;
}.

qrhl {top} call p1; ~ call p2; {Cla[x1=x2 âˆ§ y1=y2]}.
  inline p1.
  inline p2.
  wp 1 2.
  skip.
  simp.
qed.

program p3 := {
  (x,x) <- (1,2);
}.

qrhl {top} call p3; ~ call p3; {Cla[x1=2]}.
inline p3.
wp 1 1.
skip.
simp.
qed.
