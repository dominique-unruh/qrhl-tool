isabelle.

classical var x : int.
classical var y : int.
classical var b : bit.

quantum var Q : bit.
quantum var R : bit.

program p1 := {
  b <$ uniform UNIV;
  b <- measure R with computational_basis;
  Q <q ket 1;
  y <- x+1;
  if (b=0) then { b <- 1; } else { b <- 0; }
  on Q apply hadamard;
}.

qrhl {⟦R1⟧ =⇩q ket 0} call p1; ~ call p1; {top}.
  inline p1.

  sp 1 1.
    simp!.
    simp!.
    simp!.
    simp!.

  simp.

  sp left.
    simp!.
    simp!.

  simp SUP_UNIV_bit_expand.
  
  sp right.
    simp!.
    simp!.
  
  sp left.
    simp!.
    simp!.

  sp right.
    simp!.
    simp!.

  sp left.
    simp!.

  sp right.
    simp!.

  sp 1 1.
    simp!.
    simp!.
    simp!.
    simp!.

    sp 1 1.
    simp!.
    simp!.
    simp!.
    simp!.

  simp.
    
  skip.
  simp!.
qed.
