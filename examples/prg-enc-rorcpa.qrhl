# Formalization of one of the examples in "Quantum Relational Hoare Logic" (https://arxiv.org/abs/1802.03188)

isabelle PrgEnc.

ambient var rho : program_state.

classical var k : key.
classical var s : key.


# Variables for adversary communication
classical var m : msg.
classical var c : msg.
classical var r : msg.
classical var b : bit.

quantum var qglobA : string.
classical var cglobA : string.

# A1: inputs: none; outputs m
adversary A1 vars m,cglobA,qglobA.
# A2: inputs: c; outputs: b
adversary A2 vars c,b,cglobA,qglobA.

# B: inputs: r; outputs: b
program B := { call A1; c <- r+m; call A2; }.

program rorcpa0 := {
  k <$ uniform UNIV;
  call A1;
  c <- enc(k,m);
  call A2;
}.

program rorcpa1 := {
  k <$ uniform UNIV;
  call A1;
  r <$ uniform UNIV;
  c <- enc(k,r);
  call A2;
}.

program prg0 := {
  s <$ uniform UNIV;
  r <- G(s);
  call B;
}.

program prg1 := {
  r <$ uniform UNIV;
  call B;
}.



lemma rorcpa0_prg0: Pr[b=1:rorcpa0(rho)] = Pr[b=1:prg0(rho)].

 byqrhl.
 simp.
 inline rorcpa0.
 inline prg0.
 inline B.
 equal.
  simp!.
 wp left.
 wp right.
 equal.
  simp!.
 simp.
 wp right.
 simp.
 rnd.
 skip.
 simp.
qed.


lemma rorcpa1_prg1: Pr[b=1:rorcpa1(rho)] = Pr[b=1:prg1(rho)].

 byqrhl.
 simp.
 inline rorcpa1.
 inline prg1.
 inline B.
 equal.
  simp!.
 simp.
 wp left.
 wp right.
 simp.
 swap right.
 rnd r,r <- map_distr (Î»r. (r,r + G k1 + m2)) (uniform UNIV).
 simp.
 equal.
  simp!.
 wp left.
 skip.
 simp.
 simp ! aux_bij.
qed.

lemma final: abs (Pr[b=1:rorcpa0(rho)] - Pr[b=1:rorcpa1(rho)]) = abs (Pr[b=1:prg0(rho)] - Pr[b=1:prg1(rho)]).

 simp ! rorcpa0_prg0 rorcpa1_prg1.
qed.
