# TODO make proper example file

isabelle O2H_Example.

quantum var IN : X.
quantum var OUT : Y.
classical var G : X => Y.
classical var H : X => Y.
classical var in_S : bit.
classical var found : bool.
classical var S : X set.
classical var z : Aux.
classical var count : nat.
classical var b : bit.

ambient var q : nat.
ambient var rho : program_state.
ambient var distr : (X set * (X => Y) * (X => Y) * Aux) distr.

adversary A free IN, OUT, b, z
            calls ?.

program queryG := {
  on IN, OUT apply (Uoracle G);
}.

program queryGS := {
  in_S <- measure IN with binary_measurement (proj_classical_set S);
  if (in_S=1) then found <- True; else skip;
  call queryG;
}.

program queryH := {
  on IN, OUT apply (Uoracle H);
}.

program Count(O) := {
  call O;
  count <- count + 1;
}.

program left := {
  count <- 0;
  (S,G,H,z) <$ distr;
  { local IN, OUT; call A(Count(queryG)); }
}.

program right := {
  count <- 0;
  (S,G,H,z) <$ distr;
  { local IN, OUT; call A(Count(queryH)); }
}.

program find := {
  count <- 0;
  (S,G,H,z) <$ distr;
  found <- False;
  { local IN, OUT; call A(Count(queryGS)); }
}.

lemma o2h: abs ( Pr[b=1 : left(rho)] - Pr[b=1 : right(rho)] )
             <= 2 * sqrt( (1+real q) * Pr[found : find(rho)] ).
 o2h.
 admit.
 admit.
 admit.
 admit.
qed.


# *********************

ambient var scs_distr : (X set * (X => Y) * Aux) distr.
classical var stop_at : nat.
classical var guess : X.

# queryG, queryGS, Count as before

program queryGM := {
  if (count=stop_at) then
    guess <- measure IN with computational_basis;
  else
    skip;

  call queryG;
}.

program scs_left := {
  count <- 0;
  (S,G,z) <$ scs_distr;
  found <- False;
  { local IN, OUT; call A(Count(queryGS)); }
}.


program scs_right := {
  count <- 0;
  stop_at <$ uniform {..<q};
  (S,G,z) <$ scs_distr;
  { local IN, OUT; call A(Count(queryGM)); }
}.

lemma scs_left_scs_right: Pr[found:scs_left(rho)] <= 4 * real q * Pr[guessâˆˆS:scs_right(rho)].
 semiclassical.
 admit.
 admit.
qed.
